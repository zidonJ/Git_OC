[]  查找中括号内不的字符，可以是单个字符，也可以是一个范围

    1.[abc]匹配包含abc(不是‘abc’的字符串)
    2.[^abc]匹配不包含abc
    3.[0-9][a-z][A-Z]代表范围
    4.可以匹配 'a' 到 'z' 范围内的任意小写字母字符。
    5.[^a-z]	负值字符范围。匹配任何不在指定范围内的任意字符。例如，'[^a-z]' 可以匹配任何不在 'a' 到 'z' 范围内的任意字符。
    6.x|y	匹配 x 或 y。例如，'z|food' 能匹配 "z" 或 "food"。'(z|f)ood' 则匹配 "zood" 或 "food"。


.   匹配单个字符，除了换行和结束符

\   将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，'n' 匹配字符 "n"。'\n' 匹配一个换行符。序列 '\\' 匹配 "\" 而 "\(" 则匹配 "("

^   匹配输入字符串的开始位置.

    ^abcdefg 匹配abcdefg1234123412中的字符，如果第一个字符对不上则匹配不到，可以匹配以什么字符开头

$   匹配输入字符串的结束位置
    {}$ 匹配&*(_)*(&^|}{}到的是{}

*   匹配前面的子表达式零次或多次
    ae* 匹配asdfasdfasdfdsfsadaeeeeee的结果是所有的’a‘和最后的‘aeeeeee’

+	匹配前面的子表达式一次或多次
    'zo+' 能匹配 "zo" 以及 "zoo"，但不能匹配 "z"。

?	匹配前面的子表达式零次或一次

    as? 匹配deassefsadf能匹配到‘a’和‘as’ 但不能匹配‘assss..’

{n}	n 是一个非负整数,匹配连续的n次
    'o{2}' 不能匹配 "Bob" 中的 'o'，但是能匹配 "food" 中的两个 o

{n,} n 是一个非负整数。至少匹配n 次
    能匹配到所有连续的字符

{n,m}	m 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次

?	当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串

(pattern)	匹配 pattern 并‘获取’这一匹配
            \(|(o|a)|\)  匹配ooobasdflka())(到所有的‘o’he‘a’和括号‘(’和')'

(?:pattern)	匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。

(?=pattern)	正向预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。

    'Windows (?=95|98|NT|2000)' 能匹配 "Windows 2000" 中的 "Windows" ，但不能匹配 "Windows 3.1" 中的 "Windows"。*预查不消耗字符*，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。

(?!pattern)	负向预查，在任何不匹配 pattern 的字符串开始处匹配查找字符串。

    这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如'Windows (?!95|98|NT|2000)' 能匹配 "Windows 3.1" 中的 "Windows"，但不能匹配 "Windows 2000" 中的 "Windows"。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始

\b	匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\b' 可以匹配"never" 中的 'er'，但不能匹配 "verb" 中的 'er'

\B	匹配非单词边界。'er\B' 能匹配 "verb" 中的 'er'，但不能匹配 "never" 中的 'er'

\cx	匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一

\d	匹配一个数字字符。等价于 [0-9]。
\D	匹配一个非数字字符。等价于 [^0-9]。
\f	匹配一个换页符。等价于 \x0c 和 \cL。
\n	匹配一个换行符。等价于 \x0a 和 \cJ。
\r	匹配一个回车符。等价于 \x0d 和 \cM。
\s	匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。
\S	匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。
\t	匹配一个制表符。等价于 \x09 和 \cI。
\v	匹配一个垂直制表符。等价于 \x0b 和 \cK。
\w	匹配包括下划线的任何单词字符。等价于'[A-Za-z0-9_]'。
\W	匹配任何非单词字符。等价于 '[^A-Za-z0-9_]'

\xn	匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，'\x41' 匹配 "A"。'\x041' 则等价于 '\x04' & "1"。正则表达式中可以使用 ASCII 编码

\num 向后引用（back-reference）一个子字符串（substring），该子字符串与正则表达式的第num个用括号围起来的捕捉群（capture group）子表达式（subexpression）匹配。其中num是从1开始的十进制正整数，其上限可能是9、31、99甚至无限。例如：“(.)\1”匹配两个连续的相同字符。






















